cmake_minimum_required(VERSION 3.11)

execute_process(COMMAND which nvcc OUTPUT_VARIABLE has_nvcc)
if(has_nvcc STREQUAL "")
  execute_process(COMMAND which hipcc OUTPUT_VARIABLE has_hipcc)
  if(has_hipcc STREQUAL "")
    project(qsim)
  else()
    project(qsim LANGUAGES CXX HIP)
  endif()
else()
  project(qsim LANGUAGES CXX CUDA)
endif()

IF (WIN32)
    set(CMAKE_CXX_FLAGS "/O2 /openmp")
ELSE()
    set(CMAKE_CXX_FLAGS "-O3 -fopenmp")
ENDIF()

if(APPLE)
    set(CMAKE_CXX_STANDARD 14)
    include_directories("/usr/local/include" "/usr/local/opt/llvm/include")
    link_directories("/usr/local/lib" "/usr/local/opt/llvm/lib")
endif()

INCLUDE(../GetPybind11.cmake)

if(has_nvcc STREQUAL "")
  if(has_hipcc STREQUAL "")
    pybind11_add_module(qsim_decide decide.cpp)
    message(STATUS "pybind11 include directories: ${pybind11_INCLUDE_DIRS}")

    target_include_directories(qsim_decide PRIVATE ${pybind11_INCLUDE_DIRS})

  else()
    list(APPEND CMAKE_MODULE_PATH "/opt/rocm/lib/cmake/hip")
    find_package(HIP REQUIRED)
    find_package(Python3 3.7 REQUIRED COMPONENTS Interpreter Development)

    include_directories(${PYTHON_INCLUDE_DIRS} ${pybind11_SOURCE_DIR}/include)

    hip_add_library(qsim_decide MODULE decide.cpp)

    set_target_properties(qsim_decide PROPERTIES
        PREFIX "${PYTHON_MODULE_PREFIX}"
        SUFFIX "${PYTHON_MODULE_EXTENSION}"
    )
    set_source_files_properties(decide.cpp PROPERTIES LANGUAGE HIP)
  endif()
else()
  find_package(Python3 3.7 REQUIRED COMPONENTS Interpreter Development)
  find_package(CUDA REQUIRED)

  include_directories(${PYTHON_INCLUDE_DIRS} ${pybind11_SOURCE_DIR}/include)

  cuda_add_library(qsim_decide MODULE decide.cpp)

  if(DEFINED ENV{CUQUANTUM_ROOT})
      target_compile_options(qsim_decide PRIVATE
          $<$<COMPILE_LANGUAGE:CUDA>:-D__CUSTATEVEC__>
      )
  endif()

  set_target_properties(qsim_decide PROPERTIES
        PREFIX "${PYTHON_MODULE_PREFIX}"
        SUFFIX "${PYTHON_MODULE_EXTENSION}"
  )
  set_source_files_properties(decide.cpp PROPERTIES LANGUAGE CUDA)
endif()
